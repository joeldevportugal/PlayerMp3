<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RGf5f/sz9DE10UWgAAAAAElFTkSuQmCC
</value>
  </data>
</root>